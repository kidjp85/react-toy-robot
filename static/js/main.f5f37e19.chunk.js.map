{"version":3,"sources":["serviceWorker.ts","app/configs/styles.ts","app/configs/constants.ts","app/utils/index.ts","app/components/styledComponents/index.tsx","app/selectors/robot.ts","app/components/robot/index.tsx","app/containers/Robot.ts","app/components/errorMessage/index.tsx","app/containers/ErrorMessage.ts","app/components/table/index.tsx","app/actions/types.ts","app/actions/robot.ts","app/components/command/CommandInput.tsx","app/components/command/CommandList.tsx","app/components/command/index.tsx","app/containers/Command.ts","app/components/infoBox/index.tsx","app/reducers/robot.ts","app/reducers/index.ts","app/App.tsx","app/utils/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","colors","defaultTheme","theme","globalStyles","normalize","white","fonts","base","dark","TABLE_DIMENSION","x","y","ORIENTATION","NORTH","EAST","SOUTH","WEST","INITIAL_ROTATE_DEG","FACING_DIRECTIONS","Object","keys","COMMANDS","ERRORS","invalidCommand","join","invalidInitialCommand","notInitialized","wrongPlace","wrongDirection","wrongCoordinate","wrongMovingDirection","DESCRIPTIONS","INSTRUCTIONS","arrayFromInterger","range","Array","from","i","isRobotOnTable","isValidCoordinate","Number","isInteger","Math","sign","getCommandValues","command","split","getFacingDirection","find","k","value","getSquareSize","type","getTranslatePosition","coordinate","GlobalStyles","createGlobalStyle","Container","children","rest","width","maxWidth","mx","px","py","heightByWidth","percentage","css","RobotContainer","styled","animated","div","ErrorMessageContainer","Square","Flex","CommandBlock","PageHeading","styles","m","mb","fontSize","fontWeight","letterSpacing","color","selectErrorMessage","createSelector","state","robot","robotState","errorMessage","Robot","isPlaced","rotateDeg","prevCoordinate","usePrevious","prevIsPlaced","prevRotateDeg","params","scaleSize","deg","prevTransition","transform","currentTransition","createRobotTransition","to","props","style","height","viewBox","displayName","connect","facing","ErrorMessage","memo","transitions","useTransition","position","opacity","top","enter","left","leave","map","item","key","alignItems","p","bg","borderRadius","flex","mr","strokeWidth","red","lineHeight","prevProps","nextProps","Table","rows","columns","renderRow","useCallback","rowIndex","squareIndex","flexDirection","idx","justifyContent","textAlign","gray","ActionTypes","CommandTypes","CommandInput","handleCommand","reset","clearErrorMessage","useState","updateCommand","onChange","e","preventDefault","target","toUpperCase","handleSubmit","length","as","onSubmit","placeholder","mt","border","role","ml","onClick","CommandsList","commands","ref","useScrollToBottom","initial","overflow","orange","Command","pr","CommandList","dispatch","getState","message","inputedCommand","commandValues","errors","placeError","inputError","includes","parseInt","f","nextX","nextY","getErrorMessage","action","INPUT_ERROR","PLACE_ERROR","showPlaceError","ADD_COMMAND","addCommand","CLEAR_ERROR_MESSAGE","RESET","InfoBox","title","content","initialState","robotReducer","payload","PLACE","MOVE","LEFT","RIGHT","REPORT","facingDirection","combineReducers","store","middlewares","thunk","createStore","reducer","compose","applyMiddleware","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5f37e19.chunk.js","sourcesContent":["const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nconst registerValidSW = (swUrl: string, config?: Config) => {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n};\n\nconst checkValidServiceWorker = (swUrl: string, config?: Config) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n};\n\nexport const register = (config?: Config) => {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n};\n\nexport const unregister = () => {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n};\n","import { normalize, theme as defaultTheme } from '@react-yuki/ui';\n\nexport const colors = defaultTheme.colors;\n\nexport const theme = defaultTheme;\n\nexport const globalStyles = `\n  ${normalize}\n\n  html,\n  body {\n    background-color: ${theme.colors.white};\n    font-family: ${theme.fonts.base};\n    color: ${theme.colors.dark};\n    font-size: 16px;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-font-smoothing: antialiased;\n    overflow-x: hidden;\n    overflow-y: scroll;\n    text-rendering: optimizeLegibility;\n    text-size-adjust: 100%;\n    padding: 0;\n    margin: 0;\n    width: 100%;\n    height: 100%;\n\n    * {\n      box-sizing: border-box;\n    }\n\n    a, button {\n      cursor: pointer;\n    }\n\n    a {\n      text-decoration: none;\n\n      &:hover {\n        text-decoration: underline;\n      }\n    }\n\n    #root {\n      width: 100%;\n      height: 100%;\n    }\n\n    button {\n      &:focus {\n        outline: 0;\n      }\n    }\n  }\n`;\n","import { TableDimension, Orientation, RotateDeg } from 'app/types';\n\nexport const TABLE_DIMENSION: TableDimension = {\n  x: 5,\n  y: 5\n};\n\nexport const ORIENTATION: Orientation = {\n  NORTH: { x: 0, y: 1 },\n  EAST: { x: 1, y: 0 },\n  SOUTH: { x: 0, y: -1 },\n  WEST: { x: -1, y: 0 }\n};\n\nexport const INITIAL_ROTATE_DEG: RotateDeg = {\n  NORTH: 0,\n  EAST: 90,\n  SOUTH: 180,\n  WEST: 270\n};\n\nexport const FACING_DIRECTIONS = Object.keys(ORIENTATION);\n\nexport const COMMANDS = ['PLACE', 'MOVE', 'LEFT', 'RIGHT', 'REPORT'];\n\nexport const ERRORS = {\n  invalidCommand: `Invalid command format. Available commands are ${COMMANDS.join(' | ')}.`,\n  invalidInitialCommand: `Invalid PLACE command format. The valid PLACE command should be 'PLACE X,Y,F'.`,\n  notInitialized: `The robot is not placed on the table yet. Place it first with 'PLACE X,Y,F'`,\n  wrongPlace: `The robot was placed out of the table`,\n  wrongDirection: `Invalid facing direction value. Available directions should be ${FACING_DIRECTIONS.join(\n    ' | '\n  )}.`,\n  wrongCoordinate: `Invalid coordinate value. It must be non-negative interger.`,\n  wrongMovingDirection: `The robot can't move forward on that direction, it may fall off the table.`\n};\n\nexport const DESCRIPTIONS = [\n  'The application is a simulation of a toy robot moving on a square tabletop, of dimensions 5 units x 5 units.',\n  'There are no other obstructions on the table surface.',\n  'The robot is free to roam around the surface of the table, but must be prevented from falling to destruction.',\n  'Any movement that would result in the robot falling from the table must be prevented, however further valid movement commands must still be allowed.'\n];\n\nexport const INSTRUCTIONS = [\n  'PLACE X,Y,F - will put the toy robot on the table in position X,Y and facing NORTH, SOUTH, EAST or WEST.',\n  'MOVE - will move the toy robot one unit forward in the direction it is currently facing.',\n  'LEFT | RIGHT - will rotate the robot 90 degrees in the specified direction without changing the position of the robot.',\n  'REPORT - will announce the X,Y and F of the robot. This can be in any form, but standard output is sufficient.'\n];\n","import {\n  TABLE_DIMENSION,\n  FACING_DIRECTIONS,\n  ERRORS,\n  COMMANDS,\n  ORIENTATION\n} from 'app/configs/constants';\nimport {\n  ThemeProps,\n  IsRobotOnTable,\n  GetCommandList,\n  GetErrorMessages,\n  ErrorMessages,\n  GetFacingDirection,\n  GetTranslatePosition,\n  CreateRobotTransition,\n  GetSquareSize\n} from 'app/utils/types';\n\nexport const themed = <P>(key: string) => (props: ThemeProps & P) => props.theme[key];\n\nexport const arrayFromInterger = (range: number) => Array.from(Array(range).keys(), i => i);\n\nexport const isRobotOnTable: IsRobotOnTable = ({ x, y }) =>\n  x > -1 && x < TABLE_DIMENSION.x && y > -1 && y < TABLE_DIMENSION.y;\n\nexport const isValidCoordinate = (x: number) => Number.isInteger(x) && Math.sign(x) >= 0;\n\nexport const getCommandValues: GetCommandList = command => command.split(/[\\s,]+/);\n\nexport const getErrorMessage: GetErrorMessages = ({\n  inputedCommand,\n  isPlaced,\n  facing,\n  coordinate\n}) => {\n  const commandValues = getCommandValues(inputedCommand);\n\n  const command = commandValues[0];\n\n  let errors: ErrorMessages = {\n    placeError: '',\n    inputError: ''\n  };\n\n  if (command) {\n    // Error for invalid command\n    if (!COMMANDS.includes(command)) {\n      errors.inputError = ERRORS.invalidCommand;\n\n      return errors;\n    } else if (command === 'PLACE') {\n      // Error for invalid initial command\n      if (commandValues.length < 4) {\n        errors.inputError = ERRORS.invalidInitialCommand;\n\n        return errors;\n      } else {\n        const x = parseInt(commandValues[1], 10);\n\n        const y = parseInt(commandValues[2], 10);\n\n        const f = commandValues[3];\n\n        if (!isValidCoordinate(x) || !isValidCoordinate(y)) {\n          errors.inputError = ERRORS.wrongCoordinate;\n\n          return errors;\n        }\n\n        if (!FACING_DIRECTIONS.includes(f)) {\n          errors.inputError = ERRORS.wrongDirection;\n\n          return errors;\n        }\n\n        if (!isRobotOnTable({ x, y })) {\n          errors.inputError = ERRORS.wrongPlace;\n\n          return errors;\n        }\n      }\n    } else {\n      // Error for robot not being replaced\n      if (!isPlaced) {\n        errors.inputError = ERRORS.notInitialized;\n\n        return errors;\n      }\n\n      // Error for falling off table\n      if (command === 'MOVE' && coordinate !== null) {\n        const nextX = coordinate.x + facing.x;\n\n        const nextY = coordinate.y + facing.y;\n\n        if (!isRobotOnTable({ x: nextX, y: nextY })) {\n          errors.placeError = ERRORS.wrongMovingDirection;\n\n          return errors;\n        }\n      }\n    }\n  }\n\n  return errors;\n};\n\nexport const getFacingDirection: GetFacingDirection = ({ x, y }) => {\n  const keys = Object.keys(ORIENTATION);\n\n  return keys.find(k => {\n    const value = ORIENTATION[k];\n\n    return value.x === x && value.y === y;\n  });\n};\n\nexport const getSquareSize: GetSquareSize = (type = 'x') => `${(1 / TABLE_DIMENSION[type]) * 100}%`;\n\nexport const getTranslatePosition: GetTranslatePosition = coordinate => {\n  const { y } = TABLE_DIMENSION;\n\n  if (!coordinate || coordinate === null) return `translate(0%, 0%)`;\n\n  return `translate(${coordinate.x * 100}%, ${(y - (coordinate.y + 1)) * 100}%)`;\n};\n\nexport const createRobotTransition: CreateRobotTransition = params => {\n  const { coordinate, prevCoordinate, prevIsPlaced, rotateDeg, prevRotateDeg } = params;\n\n  const scaleSize = prevIsPlaced ? '1' : '5';\n\n  const deg = prevIsPlaced ? prevRotateDeg : rotateDeg;\n\n  const translateCoordinate = prevIsPlaced ? prevCoordinate : coordinate;\n\n  return {\n    prevTransition: {\n      transform: `${getTranslatePosition(\n        translateCoordinate\n      )} rotate(${deg}deg) scale(${scaleSize})`\n    },\n    currentTransition: {\n      transform: `${getTranslatePosition(coordinate)} rotate(${rotateDeg}deg) scale(1)`\n    }\n  };\n};\n","import React, { SFC } from 'react';\nimport styled, { createGlobalStyle, css } from 'styled-components';\nimport { animated } from 'react-spring';\nimport { Flex, Heading, FlexBoxProps, HeadingProps } from '@react-yuki/ui';\n\nimport { globalStyles } from 'app/configs/styles';\nimport { getSquareSize } from 'app/utils';\n\nexport const GlobalStyles = createGlobalStyle`${globalStyles}`;\n\nexport const Container: SFC<FlexBoxProps> = ({ children, ...rest }) => (\n  <Flex {...rest} width={1} maxWidth=\"1440px\" mx=\"auto\" px={[3, 4, 4, 4]} py={[3, 4, 5, 5]}>\n    {children}\n  </Flex>\n);\n\nexport const heightByWidth = (percentage: number = 100) => css`\n  &:before {\n    display: block;\n    padding-top: ${percentage}%;\n    content: '';\n  }\n`;\n\nexport const RobotContainer = styled(animated.div)`\n  position: absolute;\n  display: flex;\n  width: ${getSquareSize()};\n  align-items: center;\n  justify-content: center;\n\n  ${heightByWidth()}\n`;\n\nexport const ErrorMessageContainer = styled(animated.div)`\n  position: absolute;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Square = styled(Flex)<FlexBoxProps>`\n  width: ${getSquareSize()};\n\n  ${heightByWidth()};\n`;\n\nexport const CommandBlock = styled(Flex)<FlexBoxProps>`\n  ${heightByWidth(70)}\n`;\n\nexport const PageHeading: SFC<HeadingProps> = ({ children, ...styles }) => (\n  <Heading\n    width={1}\n    m={0}\n    mb={3}\n    fontSize={[5, 7, 8, 8]}\n    fontWeight={[3, 2, 2, 2]}\n    letterSpacing=\"medium\"\n    color=\"red.3\"\n    {...styles}\n  >\n    {children}\n  </Heading>\n);\n","import { createSelector } from 'reselect';\nimport { ApplicationState, RobotState } from 'app/reducers/types';\nimport { Coordinate, Facing } from 'app/types';\n\nexport const selectRobotState = () => (state: ApplicationState) => state.robot;\n\nexport const selectCoordinate = () =>\n  createSelector<ApplicationState, RobotState, Coordinate>(\n    selectRobotState(),\n    robotState => robotState.coordinate\n  );\n\nexport const selectFacing = () =>\n  createSelector<ApplicationState, RobotState, Facing>(\n    selectRobotState(),\n    robotState => robotState.facing\n  );\n\nexport const selectRotateDeg = () =>\n  createSelector<ApplicationState, RobotState, number>(\n    selectRobotState(),\n    robotState => robotState.rotateDeg\n  );\n\nexport const selectCommmands = () =>\n  createSelector<ApplicationState, RobotState, string[]>(\n    selectRobotState(),\n    robotState => robotState.commands\n  );\n\nexport const selectErrorMessage = () =>\n  createSelector<ApplicationState, RobotState, string>(\n    selectRobotState(),\n    robotState => robotState.errorMessage\n  );\n\nexport const selectIsPlaced = () =>\n  createSelector<ApplicationState, RobotState, boolean>(\n    selectRobotState(),\n    robotState => robotState.isPlaced\n  );\n","import React, { SFC } from 'react';\nimport { Spring } from 'react-spring/renderprops.cjs';\nimport RobotIcon from '@react-yuki/icons/lib/RobotVacuum';\nimport { usePrevious } from '@react-yuki/hooks';\nimport { RobotProps } from 'app/components/robot/types';\nimport { RobotContainer } from 'app/components/styledComponents';\nimport { Coordinate } from 'app/types';\nimport { createRobotTransition } from 'app/utils';\n\nconst Robot: SFC<RobotProps> = ({ coordinate, isPlaced, rotateDeg }) => {\n  const prevCoordinate = usePrevious<Coordinate>(coordinate);\n\n  const prevIsPlaced = usePrevious<boolean>(isPlaced);\n\n  const prevRotateDeg = usePrevious<number>(rotateDeg);\n\n  if (!isPlaced) return null;\n\n  const { currentTransition, prevTransition } = createRobotTransition({\n    prevIsPlaced,\n    coordinate,\n    prevCoordinate,\n    rotateDeg,\n    prevRotateDeg\n  });\n\n  return (\n    <Spring from={{ ...prevTransition }} to={{ ...currentTransition }}>\n      {props => (\n        <RobotContainer style={props}>\n          <RobotIcon width=\"60%\" height=\"60%\" viewBox=\"0 0 480 480\" />\n        </RobotContainer>\n      )}\n    </Spring>\n  );\n};\n\nRobot.displayName = 'Robot';\n\nexport default Robot;\n","import { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport {\n  selectCoordinate,\n  selectFacing,\n  selectRotateDeg,\n  selectIsPlaced,\n  selectErrorMessage\n} from 'app/selectors/robot';\nimport Robot from 'app/components/robot';\n\nexport default connect(\n  createSelector(\n    selectIsPlaced(),\n    selectCoordinate(),\n    selectFacing(),\n    selectRotateDeg(),\n    selectErrorMessage(),\n    (isPlaced, coordinate, facing, rotateDeg, errorMessage) => ({\n      isPlaced,\n      coordinate,\n      facing,\n      rotateDeg,\n      errorMessage\n    })\n  )\n)(Robot);\n","import React, { memo } from 'react';\nimport { useTransition } from 'react-spring';\nimport { Flex, Text } from '@react-yuki/ui';\nimport WarningIcon from '@react-yuki/icons/lib/Warning';\nimport { ErrorMessageProps } from 'app/components/errorMessage/types';\nimport { ErrorMessageContainer } from 'app/components/styledComponents';\nimport { colors } from 'app/configs/styles';\n\nconst ErrorMessage = memo<ErrorMessageProps>(\n  ({ errorMessage }) => {\n    const transitions = useTransition(errorMessage, null, {\n      from: { position: 'absolute', opacity: 0, top: '35%' },\n      enter: {\n        opacity: 0.75,\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: '90%'\n      },\n      leave: { opacity: 0, top: '65%' }\n    });\n\n    return (\n      <>\n        {transitions.map(\n          ({ item, key, props }) =>\n            item && (\n              <ErrorMessageContainer key={key} style={props}>\n                <Flex alignItems=\"center\" p={3} bg=\"dark\" borderRadius={3} width={1}>\n                  <WarningIcon\n                    flex=\"none\"\n                    width={50}\n                    height={50}\n                    mr={3}\n                    strokeWidth={2}\n                    color={colors.red[5]}\n                  />\n                  <Text fontSize={[3, 3, 5, 5]} lineHeight=\"large\" color=\"white\">\n                    {item}\n                  </Text>\n                </Flex>\n              </ErrorMessageContainer>\n            )\n        )}\n      </>\n    );\n  },\n  (prevProps, nextProps) => {\n    if (prevProps.errorMessage === nextProps.errorMessage) {\n      return true;\n    }\n\n    return false;\n  }\n);\n\nErrorMessage.displayName = 'ErrorMessage';\n\nexport default ErrorMessage;\n","import { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { selectErrorMessage } from 'app/selectors/robot';\nimport ErrorMessage from 'app/components/errorMessage';\n\nexport default connect(\n  createSelector(\n    selectErrorMessage(),\n    errorMessage => ({\n      errorMessage\n    })\n  )\n)(ErrorMessage);\n","import React, { memo, useCallback } from 'react';\nimport { Flex, Text } from '@react-yuki/ui';\nimport CompassIcon from '@react-yuki/icons/lib/Compass';\nimport { arrayFromInterger, getSquareSize } from 'app/utils';\nimport { TABLE_DIMENSION } from 'app/configs/constants';\nimport { colors } from 'app/configs/styles';\nimport { Square } from 'app/components/styledComponents';\nimport Robot from 'app/containers/Robot';\nimport ErrorMessage from 'app/containers/ErrorMessage';\n\nconst Table = memo(() => {\n  const rows = arrayFromInterger(TABLE_DIMENSION.y);\n\n  const columns = arrayFromInterger(TABLE_DIMENSION.x);\n\n  const renderRow = useCallback(\n    (rowIndex: number) => (\n      <Flex width={1} key={`row-${rowIndex}`}>\n        {columns.map((squareIndex: number) => (\n          <Square\n            key={`square-${squareIndex}`}\n            bg={(rowIndex + squareIndex) % 2 === 0 ? 'red.3' : 'blue.3'}\n          />\n        ))}\n      </Flex>\n    ),\n    [columns]\n  );\n\n  const renderCoordinateX = (idx: number) => (\n    <Flex\n      key={`coordinate-x-${idx}`}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      width={getSquareSize()}\n      height=\"60px\"\n    >\n      <Text fontSize={4} color=\"gray.8\" textAlign=\"center\">\n        {idx}\n      </Text>\n    </Flex>\n  );\n\n  const renderCoordinateY = (idx: number) => (\n    <Flex\n      key={`coordinate-y-${idx}`}\n      alignItems=\"center\"\n      justifyContent=\"center\"\n      height={getSquareSize('y')}\n      width=\"60px\"\n    >\n      <Text fontSize={4} color=\"gray.8\" textAlign=\"center\">\n        {TABLE_DIMENSION.y - 1 - idx}\n      </Text>\n    </Flex>\n  );\n\n  return (\n    <Flex width={[1, 1, 1 / 2, 1 / 2]} mb={[4, 4, 0, 0]}>\n      <Flex flex=\"none\" width=\"60px\" flexDirection=\"column\" height=\"inherit\">\n        <Flex flex=\"1 0 auto\" flexDirection=\"column\">\n          {rows.map(renderCoordinateY)}\n        </Flex>\n        <Flex alignItems=\"center\" justifyContent=\"center\" flex=\"none\" height=\"60px\">\n          <CompassIcon viewBox=\"0 0 1000 1000\" width={60} height={60} color={colors.gray[8]} />\n        </Flex>\n      </Flex>\n      <Flex width={1} flexDirection=\"column\" flex=\"1 1 auto\">\n        <Flex width={1} position=\"relative\" flexDirection=\"column\">\n          {rows.map(renderRow)}\n          <Robot />\n          <ErrorMessage />\n        </Flex>\n        <Flex width={1}>{columns.map(renderCoordinateX)}</Flex>\n      </Flex>\n    </Flex>\n  );\n});\n\nTable.displayName = 'Table';\n\nexport default Table;\n","import { ActionCreator } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\nimport {\n  addCommand,\n  reset,\n  showInputError,\n  showPlaceError,\n  clearErrorMessage\n} from 'app/actions/robot';\nimport { ApplicationState } from 'app/reducers/types';\n\nexport enum ActionTypes {\n  ADD_COMMAND = '@robot/ADD_COMMAND',\n  RESET = '@@robot/RESET',\n  INPUT_ERROR = '@@robot/INPUT_ERROR',\n  PLACE_ERROR = '@@robot/PLACE_ERROR',\n  CLEAR_ERROR_MESSAGE = '@@robot/CLEAR_ERROR_MESSAGE'\n}\n\nexport enum CommandTypes {\n  PLACE = 'PLACE',\n  MOVE = 'MOVE',\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n  REPORT = 'REPORT'\n}\n\nexport type AddCommand = ReturnType<typeof addCommand>;\n\nexport type Reset = ReturnType<typeof reset>;\n\nexport type ShowInputError = ReturnType<typeof showInputError>;\n\nexport type ShowPlaceError = ReturnType<typeof showPlaceError>;\n\nexport type ClearErrorMessage = ReturnType<typeof clearErrorMessage>;\n\nexport type RobotActions = AddCommand | Reset | ShowInputError | ShowPlaceError | ClearErrorMessage;\n\nexport type Actions = RobotActions;\n\nexport type ThunkReturn<R> = ThunkAction<R, ApplicationState, null, Actions>;\n\nexport type AsyncActionCreator<R> = ActionCreator<ThunkReturn<R>>;\n","import { action } from 'typesafe-actions';\nimport { ActionTypes, AsyncActionCreator } from 'app/actions/types';\nimport { getErrorMessage } from 'app/utils';\n\nexport const addCommand = (command: string) => action(ActionTypes.ADD_COMMAND, { command });\n\nexport const reset = () => action(ActionTypes.RESET);\n\nexport const showInputError = (message: string) => action(ActionTypes.INPUT_ERROR, { message });\n\nexport const showPlaceError = (message: string) => action(ActionTypes.PLACE_ERROR, { message });\n\nexport const clearErrorMessage = () => action(ActionTypes.CLEAR_ERROR_MESSAGE);\n\nexport const handleCommand: AsyncActionCreator<void> = (command: string) => (\n  dispatch,\n  getState\n) => {\n  const {\n    robot: { facing, coordinate, isPlaced }\n  } = getState();\n\n  const { inputError, placeError } = getErrorMessage({\n    inputedCommand: command,\n    isPlaced,\n    facing,\n    coordinate\n  });\n\n  if (inputError.length) {\n    dispatch(showInputError(inputError));\n\n    return;\n  }\n\n  if (placeError.length) {\n    dispatch(showPlaceError(placeError));\n\n    return;\n  }\n\n  dispatch(addCommand(command));\n};\n","import React, { memo, useState, ChangeEvent, useCallback } from 'react';\nimport { Flex, Input, Button, Box } from '@react-yuki/ui';\nimport { CommandInputProps } from 'app/components/command/types';\n\nconst CommandInput = memo<CommandInputProps>(({ handleCommand, reset, clearErrorMessage }) => {\n  const [command, updateCommand] = useState('');\n\n  const onChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault();\n\n    updateCommand(e.target.value.toUpperCase());\n  }, []);\n\n  const handleSubmit = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      e.preventDefault();\n\n      if (command.length === 0) return;\n\n      clearErrorMessage();\n\n      handleCommand(command);\n\n      updateCommand('');\n    },\n    [command, clearErrorMessage, handleCommand]\n  );\n\n  return (\n    <Flex width={1} flexDirection=\"column\" flex=\"none\">\n      <Box as=\"form\" onSubmit={handleSubmit} width={1}>\n        <Flex flexDirection=\"column\">\n          <Input\n            value={command}\n            onChange={onChange}\n            placeholder=\"Tell the robot what to do ...\"\n            height=\"50px\"\n            fontSize={4}\n          />\n          <Flex mt={4}>\n            <Button\n              m={0}\n              border={0}\n              bg=\"orange.3\"\n              color=\"white\"\n              flex=\"none\"\n              type=\"submit\"\n              role=\"button\"\n              height=\"50px\"\n              width=\"48%\"\n              mr=\"2%\"\n            >\n              Run\n            </Button>\n            <Button\n              m={0}\n              border={0}\n              bg=\"blue.3\"\n              color=\"white\"\n              flex=\"none\"\n              ml=\"2%\"\n              role=\"button\"\n              height=\"50px\"\n              width=\"48%\"\n              onClick={reset}\n            >\n              Reset\n            </Button>\n          </Flex>\n        </Flex>\n      </Box>\n    </Flex>\n  );\n});\n\nCommandInput.displayName = 'CommandInput';\n\nexport default CommandInput;\n","import React, { memo } from 'react';\nimport { useTransition, animated, UseTransitionResult } from 'react-spring';\nimport { Text, Flex } from '@react-yuki/ui';\nimport ArrowRightIcon from '@react-yuki/icons/lib/ArrowRight';\nimport { useScrollToBottom } from '@react-yuki/hooks';\nimport { CommandListProps } from 'app/components/command/types';\nimport { colors } from 'app/configs/styles';\nimport { CommandBlock } from 'app/components/styledComponents';\n\nconst CommandsList = memo<CommandListProps>(\n  ({ commands }) => {\n    if (commands.length === 0) {\n      return null;\n    }\n\n    const { ref } = useScrollToBottom<string[]>(commands);\n\n    const transitions = useTransition(commands, command => command, {\n      initial: { opacity: 0, transform: 'translate(0%, 100%)' },\n      from: { opacity: 0, transform: 'translate(0%, 100%)' },\n      enter: { opacity: 1, transform: 'translate(0%, 0%)' }\n    });\n\n    const renderCommand = ({ item, props }: UseTransitionResult<string, object>, idx: number) => (\n      <animated.div key={`command-list-${idx}`} style={props}>\n        <Flex width={1} mb={idx === commands.length - 1 ? 0 : 3} alignItems=\"center\">\n          <ArrowRightIcon\n            flex=\"none\"\n            width={12}\n            height={12}\n            strokeWidth={3}\n            color={colors.orange[3]}\n            mr={2}\n          />\n          <Text fontWeight={4} fontSize={3} color=\"white\">\n            {item}\n          </Text>\n        </Flex>\n      </animated.div>\n    );\n\n    return (\n      <CommandBlock width={1} mt={4} borderRadius={3} position=\"relative\" bg=\"dark\" opacity={0.8}>\n        <Flex\n          ref={ref}\n          py={4}\n          px={3}\n          flexDirection=\"column\"\n          overflow=\"scroll\"\n          position=\"absolute\"\n          top={0}\n          left={0}\n          width={1}\n          height=\"100%\"\n        >\n          {transitions.map(renderCommand)}\n        </Flex>\n      </CommandBlock>\n    );\n  },\n  (prevProps, nextProps) => {\n    if (prevProps.commands.length === nextProps.commands.length) {\n      return true;\n    }\n\n    return false;\n  }\n);\n\nCommandsList.displayName = 'CommandsList';\n\nexport default CommandsList;\n","import React, { SFC } from 'react';\nimport { Flex } from '@react-yuki/ui';\nimport { CommandProps } from 'app/components/command/types';\nimport CommandInput from 'app/components/command/CommandInput';\nimport CommandList from 'app/components/command/CommandList';\n\nconst Command: SFC<CommandProps> = ({ commands, handleCommand, reset, clearErrorMessage }) => (\n  <Flex flex=\"none\" width={[1, 1, 1 / 2, 1 / 2]} pr={[0, 0, 5, 5]} flexDirection=\"column\">\n    <CommandInput\n      handleCommand={handleCommand}\n      clearErrorMessage={clearErrorMessage}\n      reset={reset}\n    />\n    <CommandList commands={commands} />\n  </Flex>\n);\n\nCommand.displayName = 'Command';\n\nexport default Command;\n","import { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\nimport { selectCommmands } from 'app/selectors/robot';\nimport { handleCommand, reset, clearErrorMessage } from 'app/actions/robot';\nimport Command from 'app/components/command';\n\nexport default connect(\n  createSelector(\n    selectCommmands(),\n    commands => ({\n      commands\n    })\n  ),\n  { handleCommand, clearErrorMessage, reset }\n)(Command);\n","import React, { memo } from 'react';\nimport { Flex, Text } from '@react-yuki/ui';\nimport ArrowRightIcon from '@react-yuki/icons/lib/ArrowRightLong';\nimport { PageHeading } from 'app/components/styledComponents';\nimport { colors } from 'app/configs/styles';\nimport { InfoBoxProps } from 'app/components/infoBox/types';\n\nconst InfoBox = memo<InfoBoxProps>(({ title, content }) => {\n  const renderDescription = (content: string, idx: number) => (\n    <Flex width={1} key={`game-description-${idx}`} alignItems=\"flex-start\" mb={2}>\n      <ArrowRightIcon\n        width={14}\n        height={24}\n        color={colors.gray[8]}\n        mr={2}\n        flex=\"none\"\n        strokeWidth={3}\n      />\n      <Text lineHeight=\"large\" color=\"gray.8\" fontSize={[3, 3, 4, 4]}>\n        {content}\n      </Text>\n    </Flex>\n  );\n\n  return (\n    <Flex flexDirection=\"column\" mb={4}>\n      <PageHeading>{title}</PageHeading>\n      <Flex flexDirection=\"column\">{content.map(renderDescription)}</Flex>\n    </Flex>\n  );\n});\n\nInfoBox.displayName = 'InfoBox';\n\nexport default InfoBox;\n","import { Reducer } from 'redux';\nimport { RobotState } from 'app/reducers/types';\nimport { ActionTypes, RobotActions, CommandTypes } from 'app/actions/types';\nimport { getCommandValues, getFacingDirection } from 'app/utils';\nimport { ORIENTATION, INITIAL_ROTATE_DEG } from 'app/configs/constants';\n\nexport const initialState: RobotState = {\n  isPlaced: false,\n  coordinate: null,\n  facing: { x: 0, y: 1 },\n  rotateDeg: 0,\n  commands: [],\n  errorMessage: ''\n};\n\nconst robotReducer: Reducer<RobotState, RobotActions> = (state = initialState, action) => {\n  switch (action.type) {\n    case ActionTypes.ADD_COMMAND: {\n      const commandValues = getCommandValues(action.payload.command);\n\n      const command = commandValues[0];\n\n      switch (command) {\n        case CommandTypes.PLACE: {\n          const x = parseInt(commandValues[1], 10);\n\n          const y = parseInt(commandValues[2], 10);\n\n          const f = commandValues[3];\n\n          return {\n            ...state,\n            facing: { ...state.facing, ...ORIENTATION[f] },\n            coordinate: { x, y },\n            rotateDeg: INITIAL_ROTATE_DEG[f],\n            isPlaced: true,\n            commands: [...state.commands, `${CommandTypes.PLACE} ${x},${y},${f}`]\n          };\n        }\n\n        // Commands except PLACE should update state only when robot was placed\n\n        case CommandTypes.MOVE: {\n          return {\n            ...state,\n            ...(state.isPlaced &&\n              state.coordinate !== null && {\n                coordinate: {\n                  x: state.coordinate.x + state.facing.x,\n                  y: state.coordinate.y + state.facing.y\n                },\n                commands: [...state.commands, CommandTypes.MOVE]\n              })\n          };\n        }\n\n        case CommandTypes.LEFT: {\n          return {\n            ...state,\n            ...(state.isPlaced && {\n              facing: {\n                x: state.facing.y !== 0 ? -state.facing.y : 0,\n                y: state.facing.x\n              },\n              rotateDeg: state.rotateDeg - 90,\n              commands: [...state.commands, CommandTypes.LEFT]\n            })\n          };\n        }\n\n        case CommandTypes.RIGHT: {\n          return {\n            ...state,\n            ...(state.isPlaced && {\n              facing: {\n                x: state.facing.y,\n                y: state.facing.x !== 0 ? -state.facing.x : 0\n              },\n              rotateDeg: state.rotateDeg + 90,\n              commands: [...state.commands, CommandTypes.RIGHT]\n            })\n          };\n        }\n\n        case CommandTypes.REPORT: {\n          const facingDirection = getFacingDirection(state.facing);\n\n          return {\n            ...state,\n            ...(state.isPlaced &&\n              state.coordinate !== null && {\n                commands: [\n                  ...state.commands,\n                  `OUTPUT: ${state.coordinate.x},${state.coordinate.y},${facingDirection}`\n                ]\n              })\n          };\n        }\n\n        default: {\n          return state;\n        }\n      }\n    }\n\n    case ActionTypes.INPUT_ERROR: {\n      return {\n        ...initialState,\n        errorMessage: action.payload.message\n      };\n    }\n\n    case ActionTypes.PLACE_ERROR: {\n      return {\n        ...state,\n        errorMessage: action.payload.message\n      };\n    }\n\n    case ActionTypes.CLEAR_ERROR_MESSAGE: {\n      return {\n        ...state,\n        errorMessage: ''\n      };\n    }\n\n    case ActionTypes.RESET: {\n      return initialState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default robotReducer;\n","import { combineReducers } from 'redux';\nimport { ApplicationState } from 'app/reducers/types';\nimport robot from 'app/reducers/robot';\n\nexport default combineReducers<ApplicationState>({ robot });\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { ThemeProvider } from 'styled-components';\nimport { Flex, Heading } from '@react-yuki/ui';\nimport { theme } from 'app/configs/styles';\nimport { GlobalStyles, Container, PageHeading } from 'app/components/styledComponents';\nimport Table from 'app/components/table';\nimport Command from 'app/containers/Command';\nimport InfoBox from 'app/components/infoBox';\nimport createStore from 'app/utils/store';\nimport { DESCRIPTIONS, INSTRUCTIONS } from 'app/configs/constants';\n\nconst store = createStore();\n\nconst App = () => (\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <>\n        <GlobalStyles />\n        <Container width={1} flexDirection=\"column\">\n          <Heading fontSize={13} fontWeight={1} color=\"orange.4\" m={0} mb={4}>\n            Toy Robot Simulator\n          </Heading>\n          <InfoBox title=\"Descriptions\" content={DESCRIPTIONS} />\n          <InfoBox title=\"How to operate the robot\" content={INSTRUCTIONS} />\n          <PageHeading>{`Let's play with the robot`}</PageHeading>\n          <Flex flexDirection={['column-reverse', 'column-reverse', 'row', 'row']}>\n            <Command />\n            <Table />\n          </Flex>\n        </Container>\n      </>\n    </ThemeProvider>\n  </Provider>\n);\n\nexport default App;\n","import thunk from 'redux-thunk';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { ApplicationState } from 'app/reducers/types';\nimport { Dispatch, Thunk } from 'app/types';\nimport { Actions } from 'app/actions/types';\nimport reducer from 'app/reducers';\n\nexport default () => {\n  const middlewares = [thunk as Thunk];\n\n  if (process.env.NODE_ENV === 'development') {\n    const { logger } = require('redux-logger'); //eslint-disable-line\n\n    middlewares.push(logger);\n  }\n\n  return createStore<ApplicationState, Actions, { dispatch: Dispatch }, {}>(\n    reducer,\n    {},\n    compose<Dispatch>(applyMiddleware(...middlewares))\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from 'app/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}